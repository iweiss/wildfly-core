From 45e2a18b45b61a8954e337a20d2ea483d94255e5 Mon Sep 17 00:00:00 2001
From: Brian Stansberry <brian.stansberry@redhat.com>
Date: Tue, 15 Nov 2016 20:57:55 -0600
Subject: [PATCH] [WFCORE-1996] Avoid endless retries of remove if a child
 resource won't go away

---
 .../jboss/as/controller/AbstractRemoveStepHandler.java  | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/controller/src/main/java/org/jboss/as/controller/AbstractRemoveStepHandler.java b/controller/src/main/java/org/jboss/as/controller/AbstractRemoveStepHandler.java
index 56a7d2a..0d65ae6 100644
--- a/controller/src/main/java/org/jboss/as/controller/AbstractRemoveStepHandler.java
+++ b/controller/src/main/java/org/jboss/as/controller/AbstractRemoveStepHandler.java
@@ -46,6 +46,8 @@
  */
 public abstract class AbstractRemoveStepHandler implements OperationStepHandler {
 
+    private static final OperationContext.AttachmentKey<Set<PathAddress>> RECURSION = OperationContext.AttachmentKey.create(Set.class);
+
     private final Set<RuntimeCapability> capabilities;
 
     protected AbstractRemoveStepHandler() {
@@ -100,6 +102,14 @@ public void handleRollback(OperationContext context, ModelNode operation) {
     protected void performRemove(OperationContext context, final ModelNode operation, final ModelNode model) throws OperationFailedException {
         final Resource resource = context.readResource(PathAddress.EMPTY_ADDRESS);
 
+        Set<PathAddress> removed = context.getAttachment(RECURSION);
+        if (removed != null && removed.contains(context.getCurrentAddress())) {
+            // We have already tried to remove children (see below) and are now back.
+            // So avoid any chance of continual looping and just remove the resource
+            context.removeResource(PathAddress.EMPTY_ADDRESS);
+            return;
+        }
+
         // We're going to add steps to remove any children before we remove the parent
         // First, figure out what child steps we need
 
@@ -144,6 +154,13 @@ protected void performRemove(OperationContext context, final ModelNode operation
                 ControllerLogger.MGMT_OP_LOGGER.debugf("Adding remove step for child at %s", child);
                 context.addStep(Util.createRemoveOperation(child), entry.getValue(), OperationContext.Stage.MODEL, true);
             }
+
+            // Record that we have been here so when we come back we avoid looping
+            if (removed == null) {
+                removed = new HashSet<>();
+                context.attach(RECURSION, removed);
+            }
+            removed.add(context.getCurrentAddress());
         }
     }
 
